#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Successively submit batch scripts into the Slurm queue, checking that
not more jobs than `nmax` are queuing.

"""
import os
import time

import pyslurm.sbatch
import pyslurm.scmd
import pyslurm.sout


def main(inputfile, nmax=1000, wait=120, partition=None):
    # Load Slurm batch scripts from disk and submit them.
    scripts = pyslurm.sbatch.collection(inputfile)
    jobs = submit(scripts, partition, nmax, wait)

    # Save names and IDs of submitted jobs.
    outputfile = os.path.basename(inputfile) + ".out"
    pyslurm.sout.save(outputfile, jobs)


def submit(scripts, partition=None, nmax=1000, wait=120):
    """Successively submit Slurm batch scripts.

    This function allows the successive submission of a collection of
    scripts into the Slurm queue, checking that not more jobs
    than `nmax` are queuing.

    Parameters
    ----------
    scripts : dict(str, SBatchScript)
        Mapping of job names to Slurm batch scripts
    partition : str, optional
        Partition for resource allocation
    nmax : int, optional
        Maximum allowed number of queuing jobs
    wait : int, optional
        Number of seconds before next submission

    Returns
    -------
    dict(str, int)
        Mapping of job names to job IDs

    """
    # We do not want to change the given dictionary.
    scripts = dict(scripts)

    jobs = {}
    while len(scripts) > 0:
        nnew = min(
            nmax - pyslurm.scmd.numjobs(str(os.getuid()), partition),
            len(scripts))

        for _ in range(nnew):
            name, script = scripts.popitem()
            jobs[name] = pyslurm.scmd.submit(script, partition)

        if len(scripts) > 0:
            time.sleep(wait)

    return jobs


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        "--in",
        nargs="?",
        type=str,
        help="path to submit description",
        required=True,
        metavar="PATH",
        dest="inputfile")

    parser.add_argument(
        "--nmax",
        nargs="?",
        type=int,
        help="maximum allowed number of queuing jobs (%(default)s)",
        default=1000,
        metavar="NUM")

    parser.add_argument(
        "--wait",
        nargs="?",
        type=int,
        help="number of seconds before next submission (%(default)s)",
        default=120,
        metavar="SEC")

    parser.add_argument(
        "--partition",
        nargs="?",
        type=str,
        help="request this particular partition",
        default=None,
        metavar="NAME")

    args = parser.parse_args()

    main(args.inputfile, args.nmax, args.wait, args.partition)
